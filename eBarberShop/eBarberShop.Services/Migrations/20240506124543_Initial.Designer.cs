// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eBarberShop.Services;

#nullable disable

namespace eBarberShop.Services.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240506124543_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eBarberShop.Services.Database.Drzava", b =>
                {
                    b.Property<int>("DrzavaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrzavaId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrzavaId");

                    b.ToTable("Drzava");

                    b.HasData(
                        new
                        {
                            DrzavaId = 1,
                            Naziv = "Bosna i Hercegovina"
                        },
                        new
                        {
                            DrzavaId = 2,
                            Naziv = "Hrvatska"
                        },
                        new
                        {
                            DrzavaId = 3,
                            Naziv = "Njemacka"
                        });
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Grad", b =>
                {
                    b.Property<int>("GradId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradId"));

                    b.Property<int>("DrzavaId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GradId");

                    b.HasIndex("DrzavaId");

                    b.ToTable("Grad");

                    b.HasData(
                        new
                        {
                            GradId = 1,
                            DrzavaId = 1,
                            Naziv = "Fojnica",
                            Opis = "Fojnica"
                        },
                        new
                        {
                            GradId = 2,
                            DrzavaId = 1,
                            Naziv = "Kiseljak",
                            Opis = "Kiseljak"
                        },
                        new
                        {
                            GradId = 3,
                            DrzavaId = 2,
                            Naziv = "Zagreb",
                            Opis = "Zagreb"
                        },
                        new
                        {
                            GradId = 4,
                            DrzavaId = 1,
                            Naziv = "Zenica",
                            Opis = "Zenica"
                        },
                        new
                        {
                            GradId = 5,
                            DrzavaId = 3,
                            Naziv = "Berlin",
                            Opis = "Berlin"
                        },
                        new
                        {
                            GradId = 6,
                            DrzavaId = 3,
                            Naziv = "Munchen",
                            Opis = "Munchen"
                        },
                        new
                        {
                            GradId = 7,
                            DrzavaId = 1,
                            Naziv = "Mostar",
                            Opis = "Mostar"
                        },
                        new
                        {
                            GradId = 8,
                            DrzavaId = 1,
                            Naziv = "Sarajevo",
                            Opis = "Sarajevo"
                        });
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Korisnici", b =>
                {
                    b.Property<int>("KorisniciId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisniciId"));

                    b.Property<string>("Adresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrojTelefona")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("KorisniciId");

                    b.HasIndex("GradId");

                    b.ToTable("Korisnici");

                    b.HasData(
                        new
                        {
                            KorisniciId = 1,
                            Adresa = "ulica 11",
                            BrojTelefona = "061/321-333",
                            Email = "admin@gmail.com",
                            GradId = 8,
                            Ime = "Admin",
                            KorisnickoIme = "admin",
                            LozinkaHash = "ekQrgQJYLA+xR3bS2JR1FFvEUHA=",
                            LozinkaSalt = "s/UuVYxq1jClLw9fNqk1eQ==",
                            Prezime = "Admin"
                        },
                        new
                        {
                            KorisniciId = 2,
                            Adresa = "ulica 2",
                            BrojTelefona = "061/000-333",
                            Email = "uposlenik@gmail.com",
                            GradId = 7,
                            Ime = "Uposlenik",
                            KorisnickoIme = "uposlenik",
                            LozinkaHash = "+xo28TJ5TtZxvBLcAn82zquibgE=",
                            LozinkaSalt = "2PmRzK+vXZLs04IxaYFw7w==",
                            Prezime = "Uposlenik"
                        },
                        new
                        {
                            KorisniciId = 3,
                            Adresa = "ulica 3",
                            BrojTelefona = "062/100-333",
                            Email = "test@gmail.com",
                            GradId = 4,
                            Ime = "Test",
                            KorisnickoIme = "test",
                            LozinkaHash = "S5vH66r4wJV7SvtEdI+aS2xx5lk=",
                            LozinkaSalt = "/mmOVKI9ycqdmKk8C+Teqw==",
                            Prezime = "Test"
                        },
                        new
                        {
                            KorisniciId = 4,
                            Adresa = "ulica 9",
                            BrojTelefona = "062/130-398",
                            Email = "klijent@gmail.com",
                            GradId = 4,
                            Ime = "Klijent",
                            KorisnickoIme = "klijent",
                            LozinkaHash = "zZsQnEz5YbHc3t2XXAn+RQtBkB0=",
                            LozinkaSalt = "GmzIx/JAJbgUc7t3xTezKQ==",
                            Prezime = "Klijent"
                        });
                });

            modelBuilder.Entity("eBarberShop.Services.Database.KorisniciUloge", b =>
                {
                    b.Property<int>("KorisniciUlogeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisniciUlogeId"));

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.HasKey("KorisniciUlogeId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("UlogaId");

                    b.ToTable("KorisniciUloge");

                    b.HasData(
                        new
                        {
                            KorisniciUlogeId = 1,
                            DatumIzmjene = new DateTime(2024, 5, 6, 14, 45, 43, 321, DateTimeKind.Local).AddTicks(8612),
                            KorisnikId = 1,
                            UlogaId = 1
                        },
                        new
                        {
                            KorisniciUlogeId = 2,
                            DatumIzmjene = new DateTime(2024, 5, 6, 14, 45, 43, 321, DateTimeKind.Local).AddTicks(8663),
                            KorisnikId = 2,
                            UlogaId = 2
                        },
                        new
                        {
                            KorisniciUlogeId = 3,
                            DatumIzmjene = new DateTime(2024, 5, 6, 14, 45, 43, 321, DateTimeKind.Local).AddTicks(8667),
                            KorisnikId = 3,
                            UlogaId = 3
                        },
                        new
                        {
                            KorisniciUlogeId = 4,
                            DatumIzmjene = new DateTime(2024, 5, 6, 14, 45, 43, 321, DateTimeKind.Local).AddTicks(8672),
                            KorisnikId = 4,
                            UlogaId = 3
                        });
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Narudzbe", b =>
                {
                    b.Property<int>("NarudzbeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NarudzbeId"));

                    b.Property<string>("BrojNarudzbe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumNarudzbe")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<bool?>("Otkazano")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("UkupanIznos")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("NarudzbeId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Narudzbe");

                    b.HasData(
                        new
                        {
                            NarudzbeId = 1,
                            BrojNarudzbe = "000001",
                            DatumNarudzbe = new DateTime(2024, 5, 6, 14, 45, 43, 321, DateTimeKind.Local).AddTicks(9062),
                            KorisnikId = 3,
                            Otkazano = false,
                            Status = true,
                            UkupanIznos = 8m
                        },
                        new
                        {
                            NarudzbeId = 2,
                            BrojNarudzbe = "000002",
                            DatumNarudzbe = new DateTime(2024, 5, 6, 14, 45, 43, 321, DateTimeKind.Local).AddTicks(9069),
                            KorisnikId = 3,
                            Otkazano = false,
                            Status = true,
                            UkupanIznos = 16m
                        },
                        new
                        {
                            NarudzbeId = 3,
                            BrojNarudzbe = "000003",
                            DatumNarudzbe = new DateTime(2024, 5, 6, 14, 45, 43, 321, DateTimeKind.Local).AddTicks(9074),
                            KorisnikId = 4,
                            Otkazano = false,
                            Status = true,
                            UkupanIznos = 6m
                        },
                        new
                        {
                            NarudzbeId = 4,
                            BrojNarudzbe = "000004",
                            DatumNarudzbe = new DateTime(2024, 5, 6, 14, 45, 43, 321, DateTimeKind.Local).AddTicks(9079),
                            KorisnikId = 4,
                            Otkazano = false,
                            Status = true,
                            UkupanIznos = 7.5m
                        });
                });

            modelBuilder.Entity("eBarberShop.Services.Database.NarudzbeDetalji", b =>
                {
                    b.Property<int>("NarudzbeDetaljiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NarudzbeDetaljiId"));

                    b.Property<int>("Kolicina")
                        .HasColumnType("int");

                    b.Property<int>("NarudzbaId")
                        .HasColumnType("int");

                    b.Property<int>("ProizvodId")
                        .HasColumnType("int");

                    b.HasKey("NarudzbeDetaljiId");

                    b.HasIndex("NarudzbaId");

                    b.HasIndex("ProizvodId");

                    b.ToTable("NarudzbeDetalji");

                    b.HasData(
                        new
                        {
                            NarudzbeDetaljiId = 1,
                            Kolicina = 1,
                            NarudzbaId = 1,
                            ProizvodId = 1
                        },
                        new
                        {
                            NarudzbeDetaljiId = 2,
                            Kolicina = 2,
                            NarudzbaId = 2,
                            ProizvodId = 1
                        },
                        new
                        {
                            NarudzbeDetaljiId = 3,
                            Kolicina = 1,
                            NarudzbaId = 3,
                            ProizvodId = 6
                        },
                        new
                        {
                            NarudzbeDetaljiId = 4,
                            Kolicina = 1,
                            NarudzbaId = 4,
                            ProizvodId = 7
                        });
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Novosti", b =>
                {
                    b.Property<int>("NovostiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NovostiId"));

                    b.Property<DateTime>("DatumObjave")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("NovostiId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Novosti");

                    b.HasData(
                        new
                        {
                            NovostiId = 1,
                            DatumObjave = new DateTime(2024, 5, 6, 14, 45, 43, 321, DateTimeKind.Local).AddTicks(8705),
                            KorisnikId = 1,
                            Naslov = "Novi trendovi u frizurama",
                            Sadrzaj = "Osvježite svoj izgled uz najnovije frizure koje su hit ove sezone! Naši stručnjaci su u toku sa najnovijim trendovima, stoga posjetite naš salon i otkrijte kako možete osvježiti svoj stil"
                        },
                        new
                        {
                            NovostiId = 2,
                            DatumObjave = new DateTime(2024, 5, 6, 14, 45, 43, 321, DateTimeKind.Local).AddTicks(8710),
                            KorisnikId = 1,
                            Naslov = "Posebna ponuda za bojanje kose",
                            Sadrzaj = "Vrijeme je za promjenu boje! U narednom mjesecu nudimo posebnu ponudu na usluge bojanja kose. Bez obzira želite li se osvježiti ili potpuno transformisati, naši stručnjaci će vam pomoći postići savršen izgled"
                        },
                        new
                        {
                            NovostiId = 3,
                            DatumObjave = new DateTime(2024, 5, 6, 14, 45, 43, 321, DateTimeKind.Local).AddTicks(8714),
                            KorisnikId = 1,
                            Naslov = "Savjetovanje sa stilistom",
                            Sadrzaj = "Želite li promjeniti frizuru, ali niste sigurni koji stil bi vam najbolje odgovarao? Zakažite savjetovanje sa našim stilistom koji će vam pomoći odabrati frizuru koja će najbolje istaći vaše karakteristike i stil"
                        });
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Ocjene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<double>("Ocjena")
                        .HasColumnType("float");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UposlenikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("UposlenikId");

                    b.ToTable("Ocjene");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Datum = new DateTime(2024, 5, 6, 14, 45, 43, 321, DateTimeKind.Local).AddTicks(8810),
                            KorisnikId = 1,
                            Ocjena = 5.0,
                            UposlenikId = 1
                        },
                        new
                        {
                            Id = 2,
                            Datum = new DateTime(2024, 5, 6, 14, 45, 43, 321, DateTimeKind.Local).AddTicks(8816),
                            KorisnikId = 2,
                            Ocjena = 5.0,
                            UposlenikId = 2
                        },
                        new
                        {
                            Id = 3,
                            Datum = new DateTime(2024, 5, 6, 14, 45, 43, 321, DateTimeKind.Local).AddTicks(8820),
                            KorisnikId = 3,
                            Ocjena = 5.0,
                            UposlenikId = 3
                        },
                        new
                        {
                            Id = 4,
                            Datum = new DateTime(2024, 5, 6, 14, 45, 43, 321, DateTimeKind.Local).AddTicks(8824),
                            KorisnikId = 4,
                            Ocjena = 5.0,
                            UposlenikId = 4
                        });
                });

            modelBuilder.Entity("eBarberShop.Services.Database.PaymentDetail", b =>
                {
                    b.Property<int>("PaymentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentDetailId"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NarudzbaId")
                        .HasColumnType("int");

                    b.Property<string>("PayerFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayerLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientCountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipientPostalCode")
                        .HasColumnType("int");

                    b.Property<string>("RecipientState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ShippingDiscount")
                        .HasColumnType("float");

                    b.Property<double>("Subtotal")
                        .HasColumnType("float");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentDetailId");

                    b.HasIndex("NarudzbaId");

                    b.ToTable("PaymentDetail");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Proizvodi", b =>
                {
                    b.Property<int>("ProizvodiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProizvodiId"));

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sifra")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VrstaProizvodaId")
                        .HasColumnType("int");

                    b.HasKey("ProizvodiId");

                    b.HasIndex("VrstaProizvodaId");

                    b.ToTable("Proizvodi");

                    b.HasData(
                        new
                        {
                            ProizvodiId = 1,
                            Cijena = 8m,
                            Naziv = "Head & shoulders",
                            Sifra = "0001",
                            VrstaProizvodaId = 1
                        },
                        new
                        {
                            ProizvodiId = 2,
                            Cijena = 9.5m,
                            Naziv = "Garnier",
                            Sifra = "0002",
                            VrstaProizvodaId = 1
                        },
                        new
                        {
                            ProizvodiId = 3,
                            Cijena = 5.5m,
                            Naziv = "Balea",
                            Sifra = "0003",
                            VrstaProizvodaId = 2
                        },
                        new
                        {
                            ProizvodiId = 4,
                            Cijena = 7m,
                            Naziv = "Taft",
                            Sifra = "0004",
                            VrstaProizvodaId = 3
                        },
                        new
                        {
                            ProizvodiId = 5,
                            Cijena = 6.5m,
                            Naziv = "got2b",
                            Sifra = "0005",
                            VrstaProizvodaId = 3
                        },
                        new
                        {
                            ProizvodiId = 6,
                            Cijena = 6m,
                            Naziv = "taft POWER",
                            Sifra = "0007",
                            VrstaProizvodaId = 4
                        },
                        new
                        {
                            ProizvodiId = 7,
                            Cijena = 7.5m,
                            Naziv = "Garnier Color Naturals",
                            Sifra = "0008",
                            VrstaProizvodaId = 5
                        },
                        new
                        {
                            ProizvodiId = 8,
                            Cijena = 8m,
                            Naziv = "Loreal",
                            Sifra = "0008",
                            VrstaProizvodaId = 5
                        });
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Recenzije", b =>
                {
                    b.Property<int>("RecenzijeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecenzijeId"));

                    b.Property<DateTime>("DatumObjave")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<double>("Ocjena")
                        .HasColumnType("float");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecenzijeId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Recenzije");

                    b.HasData(
                        new
                        {
                            RecenzijeId = 1,
                            DatumObjave = new DateTime(2024, 5, 6, 14, 45, 43, 321, DateTimeKind.Local).AddTicks(8745),
                            KorisnikId = 3,
                            Ocjena = 5.0,
                            Sadrzaj = "Posjetio sam ovaj salon prvi put, i moram priznati da sam bio zadovoljan. Atmosfera je opuštajuća, a osoblje je bilo veoma prijateljsko. Frizerka je imala odlične sugestije i savjete za negu kose. Sve preporuke!"
                        },
                        new
                        {
                            RecenzijeId = 2,
                            DatumObjave = new DateTime(2024, 5, 6, 14, 45, 43, 321, DateTimeKind.Local).AddTicks(8750),
                            KorisnikId = 4,
                            Ocjena = 4.0,
                            Sadrzaj = "Odličan salon, vrlo moderno uređen. Osoblje je veoma ljubazno i usluga je bila vrhunska. Moj frizer je bio veoma stručan i posvetio se svakom detalju. Jedini razlog zašto ne dajem pet zvjezdica je cijena koja je bila malo viša nego što sam očekivao, ali kvalitet je definitivno bio tu."
                        });
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Rezervacija", b =>
                {
                    b.Property<int>("RezervacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RezervacijaId"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("UposlenikId")
                        .HasColumnType("int");

                    b.Property<int>("UslugaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Vrijeme")
                        .HasColumnType("datetime2");

                    b.HasKey("RezervacijaId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("UposlenikId");

                    b.HasIndex("UslugaId");

                    b.ToTable("Rezervacija");

                    b.HasData(
                        new
                        {
                            RezervacijaId = 1,
                            Datum = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 3,
                            UposlenikId = 1,
                            UslugaId = 1,
                            Vrijeme = new DateTime(2024, 1, 5, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RezervacijaId = 2,
                            Datum = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 4,
                            UposlenikId = 1,
                            UslugaId = 2,
                            Vrijeme = new DateTime(2024, 1, 5, 10, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RezervacijaId = 3,
                            Datum = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 3,
                            UposlenikId = 2,
                            UslugaId = 1,
                            Vrijeme = new DateTime(2024, 1, 6, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RezervacijaId = 4,
                            Datum = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 4,
                            UposlenikId = 2,
                            UslugaId = 2,
                            Vrijeme = new DateTime(2024, 1, 6, 11, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Slike", b =>
                {
                    b.Property<int>("SlikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlikeId"));

                    b.Property<DateTime>("DatumPostavljanja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("SlikeId");

                    b.ToTable("Slike");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.SlikeUsluge", b =>
                {
                    b.Property<int>("SlikeUslugeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlikeUslugeId"));

                    b.Property<int>("SlikaId")
                        .HasColumnType("int");

                    b.Property<int>("UslugaId")
                        .HasColumnType("int");

                    b.HasKey("SlikeUslugeId");

                    b.HasIndex("SlikaId");

                    b.HasIndex("UslugaId");

                    b.ToTable("SlikeUsluge");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Uloge", b =>
                {
                    b.Property<int>("UlogeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UlogeId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UlogeId");

                    b.ToTable("Uloge");

                    b.HasData(
                        new
                        {
                            UlogeId = 1,
                            Naziv = "Administrator",
                            Opis = "administrator"
                        },
                        new
                        {
                            UlogeId = 2,
                            Naziv = "Uposlenik",
                            Opis = "Uposlenik"
                        },
                        new
                        {
                            UlogeId = 3,
                            Naziv = "Klijent",
                            Opis = "Klijent"
                        });
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Uposlenik", b =>
                {
                    b.Property<int>("UposlenikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UposlenikId"));

                    b.Property<string>("Adresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KontaktTelefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UposlenikId");

                    b.ToTable("Uposlenik");

                    b.HasData(
                        new
                        {
                            UposlenikId = 1,
                            Adresa = "ulica 123",
                            Email = "uposlenik_1@gmail.com",
                            Ime = "Uposlenik_1",
                            KontaktTelefon = "060/357-113",
                            Prezime = "Uposlenik_1"
                        },
                        new
                        {
                            UposlenikId = 2,
                            Adresa = "ulica 3",
                            Email = "uposlenik_2@gmail.com",
                            Ime = "Uposlenik_2",
                            KontaktTelefon = "060/013-123",
                            Prezime = "Uposlenik_2"
                        },
                        new
                        {
                            UposlenikId = 3,
                            Adresa = "ulica 38",
                            Email = "uposlenik_3@gmail.com",
                            Ime = "Uposlenik_3",
                            KontaktTelefon = "063/025-143",
                            Prezime = "Uposlenik_3"
                        },
                        new
                        {
                            UposlenikId = 4,
                            Adresa = "ulica 8",
                            Email = "uposlenik_4@gmail.com",
                            Ime = "Uposlenik_4",
                            KontaktTelefon = "063/098-563",
                            Prezime = "Uposlenik_4"
                        });
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Usluga", b =>
                {
                    b.Property<int>("UslugaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UslugaId"));

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Trajanje")
                        .HasColumnType("int");

                    b.HasKey("UslugaId");

                    b.ToTable("Usluga");

                    b.HasData(
                        new
                        {
                            UslugaId = 1,
                            Cijena = 10m,
                            Naziv = "Sisanje i oblikovanje",
                            Trajanje = 15
                        },
                        new
                        {
                            UslugaId = 2,
                            Cijena = 30m,
                            Naziv = "Bojanje kose",
                            Trajanje = 45
                        },
                        new
                        {
                            UslugaId = 3,
                            Cijena = 15m,
                            Naziv = "Feniranje i stilizovanje",
                            Trajanje = 30
                        },
                        new
                        {
                            UslugaId = 4,
                            Cijena = 50m,
                            Naziv = "Permanente i trajno oblikovanje",
                            Trajanje = 60
                        });
                });

            modelBuilder.Entity("eBarberShop.Services.Database.VrsteProizvoda", b =>
                {
                    b.Property<int>("VrsteProizvodaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VrsteProizvodaId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VrsteProizvodaId");

                    b.ToTable("VrsteProizvoda");

                    b.HasData(
                        new
                        {
                            VrsteProizvodaId = 1,
                            Naziv = "Sampon",
                            Opis = "Samponi prilagodeni razlicitim tipovima kose"
                        },
                        new
                        {
                            VrsteProizvodaId = 2,
                            Naziv = "Regemerator",
                            Opis = "Regeneratori za njegu i hidrataciju kose"
                        },
                        new
                        {
                            VrsteProizvodaId = 3,
                            Naziv = "Gel",
                            Opis = "Gelovi za oblikovanje kose"
                        },
                        new
                        {
                            VrsteProizvodaId = 4,
                            Naziv = "Vosak",
                            Opis = "Vosak za oblikovanje kose"
                        },
                        new
                        {
                            VrsteProizvodaId = 5,
                            Naziv = "Boje",
                            Opis = "Profesionalne boje za kosu u različitim nijansama"
                        });
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Grad", b =>
                {
                    b.HasOne("eBarberShop.Services.Database.Drzava", "Drzava")
                        .WithMany("Gradovi")
                        .HasForeignKey("DrzavaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drzava");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Korisnici", b =>
                {
                    b.HasOne("eBarberShop.Services.Database.Grad", "Grad")
                        .WithMany("Korisnici")
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grad");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.KorisniciUloge", b =>
                {
                    b.HasOne("eBarberShop.Services.Database.Korisnici", "Korisnik")
                        .WithMany("KorisniciUloge")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eBarberShop.Services.Database.Uloge", "Uloga")
                        .WithMany("KorisniciUloge")
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Narudzbe", b =>
                {
                    b.HasOne("eBarberShop.Services.Database.Korisnici", "Korisnik")
                        .WithMany("Narudzbe")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.NarudzbeDetalji", b =>
                {
                    b.HasOne("eBarberShop.Services.Database.Narudzbe", "Narudzba")
                        .WithMany("NarudzbeDetalji")
                        .HasForeignKey("NarudzbaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eBarberShop.Services.Database.Proizvodi", "Proizvod")
                        .WithMany("NarudzbeDetalji")
                        .HasForeignKey("ProizvodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Narudzba");

                    b.Navigation("Proizvod");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Novosti", b =>
                {
                    b.HasOne("eBarberShop.Services.Database.Korisnici", "Korisnik")
                        .WithMany("Novosti")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Ocjene", b =>
                {
                    b.HasOne("eBarberShop.Services.Database.Korisnici", "Korisnik")
                        .WithMany("Ocjene")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eBarberShop.Services.Database.Uposlenik", "Uposlenik")
                        .WithMany("Ocjene")
                        .HasForeignKey("UposlenikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Uposlenik");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.PaymentDetail", b =>
                {
                    b.HasOne("eBarberShop.Services.Database.Narudzbe", "Narudzba")
                        .WithMany("PaymentDetail")
                        .HasForeignKey("NarudzbaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Narudzba");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Proizvodi", b =>
                {
                    b.HasOne("eBarberShop.Services.Database.VrsteProizvoda", "VrstaProizvoda")
                        .WithMany("Proizvodi")
                        .HasForeignKey("VrstaProizvodaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VrstaProizvoda");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Recenzije", b =>
                {
                    b.HasOne("eBarberShop.Services.Database.Korisnici", "Korisnik")
                        .WithMany("Recenzije")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Rezervacija", b =>
                {
                    b.HasOne("eBarberShop.Services.Database.Korisnici", "Korisnik")
                        .WithMany("Rezervacije")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eBarberShop.Services.Database.Uposlenik", "Uposlenik")
                        .WithMany("Rezervacije")
                        .HasForeignKey("UposlenikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eBarberShop.Services.Database.Usluga", "Usluga")
                        .WithMany("Rezervacije")
                        .HasForeignKey("UslugaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Uposlenik");

                    b.Navigation("Usluga");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.SlikeUsluge", b =>
                {
                    b.HasOne("eBarberShop.Services.Database.Slike", "Slika")
                        .WithMany("SlikeUsluge")
                        .HasForeignKey("SlikaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eBarberShop.Services.Database.Usluga", "Usluga")
                        .WithMany("SlikeUsluge")
                        .HasForeignKey("UslugaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slika");

                    b.Navigation("Usluga");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Drzava", b =>
                {
                    b.Navigation("Gradovi");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Grad", b =>
                {
                    b.Navigation("Korisnici");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Korisnici", b =>
                {
                    b.Navigation("KorisniciUloge");

                    b.Navigation("Narudzbe");

                    b.Navigation("Novosti");

                    b.Navigation("Ocjene");

                    b.Navigation("Recenzije");

                    b.Navigation("Rezervacije");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Narudzbe", b =>
                {
                    b.Navigation("NarudzbeDetalji");

                    b.Navigation("PaymentDetail");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Proizvodi", b =>
                {
                    b.Navigation("NarudzbeDetalji");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Slike", b =>
                {
                    b.Navigation("SlikeUsluge");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Uloge", b =>
                {
                    b.Navigation("KorisniciUloge");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Uposlenik", b =>
                {
                    b.Navigation("Ocjene");

                    b.Navigation("Rezervacije");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.Usluga", b =>
                {
                    b.Navigation("Rezervacije");

                    b.Navigation("SlikeUsluge");
                });

            modelBuilder.Entity("eBarberShop.Services.Database.VrsteProizvoda", b =>
                {
                    b.Navigation("Proizvodi");
                });
#pragma warning restore 612, 618
        }
    }
}
